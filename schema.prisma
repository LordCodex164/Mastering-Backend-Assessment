generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(cuid()) @map("_id")
  email    String    @unique
  books    Book[]
  accounts Account[]
  Session  Session[]
}

model Book {
  id       String     @id @default(uuid())
  userId   String     @map("user_id")
  googleId String
  title    String
  author   String
  imageUrl String?
  status   BookStatus @default(WANT_TO_READ)
  user     User       @relation(fields: [userId], references: [id])

  @@map("books")
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @map("refresh_token")
  access_token       String? @map("access_token")
  expires_at         Int?    @map("expires_at")
  token_type         String? @map("token_type")
  scope              String? @map("scope")
  id_token           String? @map("id_token")
  session_state      String? @map("session_state")
  oauth_token_secret String? @map("oauth_token_secret")
  oauth_token        String? @map("oauth_token")
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum BookStatus {
  READ
  CURRENTLY_READING
  WANT_TO_READ
}
